{"version":3,"file":"kaybee.js","sources":["../src/kaybee.ts"],"sourcesContent":["export function normalizeKeyName(key: string): string {\n  return key\n    .toLowerCase() // Make all names lowercase.\n    .replace(/^arrow/, \"\") // Remove prefix for arrow keys.\n    .replace(/(^\\s$)|spacebar/, \"space\"); // Give space a reasonable name.\n}\n\ninterface Kaybee {\n  readonly stop: () => void;\n  readonly getKey: (key: string) => boolean;\n  readonly getCode: (code: string) => boolean;\n}\n\ninterface KaybeeEvent {\n  readonly key: string;\n  readonly code: string;\n  readonly repeat?: boolean;\n}\n\ninterface KaybeeOptions {\n  readonly target?: EventTarget;\n  readonly renameKeys?: boolean;\n  readonly enableRepeat?: boolean;\n  readonly onKeyDown?: (event: KaybeeEvent) => void;\n  readonly onKeyUp?: (event: KaybeeEvent) => void;\n}\n\nexport function start({\n  target = window, // The target to listen for KeyboardEvents on.\n  renameKeys = true, // Whether to normalize key names.\n  enableRepeat = false, // Whether to call onKeyDown on \"repeat\" key events.\n  onKeyDown = () => {}, // Called when a key is pressed.\n  onKeyUp = () => {}, // Called when a key is released.\n}: KaybeeOptions): Kaybee {\n  // Private API\n  const keys = new Set();\n  const codes = new Set();\n\n  function handleKeyDown({ key, code, repeat }: KeyboardEvent) {\n    const keyName = renameKeys ? normalizeKeyName(key) : key;\n    if (repeat && !enableRepeat) return;\n    keys.add(keyName);\n    codes.add(code);\n    onKeyDown({ key: keyName, code, repeat });\n  }\n\n  function handleKeyUp({ key, code }: KeyboardEvent) {\n    const keyName = renameKeys ? normalizeKeyName(key) : key;\n    keys.delete(keyName);\n    codes.delete(code);\n    onKeyUp({ key: keyName, code });\n  }\n\n  function clear() {\n    keys.clear();\n    codes.clear();\n  }\n\n  target.addEventListener(\"keydown\", handleKeyDown as EventListener);\n  target.addEventListener(\"keyup\", handleKeyUp as EventListener);\n  target.addEventListener(\"blur\", clear);\n  if (target !== window) window.addEventListener(\"blur\", clear);\n\n  // Public API\n  return {\n    stop() {\n      target.removeEventListener(\"keydown\", handleKeyDown as EventListener);\n      target.removeEventListener(\"keyup\", handleKeyUp as EventListener);\n      target.removeEventListener(\"blur\", clear);\n      if (target !== window) window.removeEventListener(\"blur\", clear);\n    },\n    getKey: (key) => keys.has(key),\n    getCode: (code) => codes.has(code),\n  };\n}\n\nexport default { normalizeKeyName, start };\n"],"names":["normalizeKeyName","key","toLowerCase","replace","start","target","window","renameKeys","enableRepeat","onKeyDown","onKeyUp","keys","Set","codes","handleKeyDown","code","repeat","keyName","add","handleKeyUp","delete","clear","addEventListener","[object Object]","removeEventListener","getKey","has","getCode"],"mappings":"SAAgBA,EAAiBC,GAC/B,OAAOA,EACJC,cACAC,QAAQ,SAAU,IAClBA,QAAQ,kBAAmB,kBAuBhBC,GAAMC,OACpBA,EAASC,OAAMC,WACfA,GAAa,EAAIC,aACjBA,GAAe,EAAKC,UACpBA,EAAY,SAAQC,QACpBA,EAAU,WAGV,MAAMC,EAAO,IAAIC,IACXC,EAAQ,IAAID,IAElB,SAASE,GAAcb,IAAEA,EAAGc,KAAEA,EAAIC,OAAEA,IAClC,MAAMC,EAAUV,EAAaP,EAAiBC,GAAOA,EACjDe,IAAWR,IACfG,EAAKO,IAAID,GACTJ,EAAMK,IAAIH,GACVN,EAAU,CAAER,IAAKgB,EAASF,KAAAA,EAAMC,OAAAA,KAGlC,SAASG,GAAYlB,IAAEA,EAAGc,KAAEA,IAC1B,MAAME,EAAUV,EAAaP,EAAiBC,GAAOA,EACrDU,EAAKS,OAAOH,GACZJ,EAAMO,OAAOL,GACbL,EAAQ,CAAET,IAAKgB,EAASF,KAAAA,IAG1B,SAASM,IACPV,EAAKU,QACLR,EAAMQ,QASR,OANAhB,EAAOiB,iBAAiB,UAAWR,GACnCT,EAAOiB,iBAAiB,QAASH,GACjCd,EAAOiB,iBAAiB,OAAQD,GAC5BhB,IAAWC,QAAQA,OAAOgB,iBAAiB,OAAQD,GAGhD,CACLE,OACElB,EAAOmB,oBAAoB,UAAWV,GACtCT,EAAOmB,oBAAoB,QAASL,GACpCd,EAAOmB,oBAAoB,OAAQH,GAC/BhB,IAAWC,QAAQA,OAAOkB,oBAAoB,OAAQH,IAE5DI,OAASxB,GAAQU,EAAKe,IAAIzB,GAC1B0B,QAAUZ,GAASF,EAAMa,IAAIX,IAIjC,MAAe,CAAEf,iBAAAA,EAAkBI,MAAAA"}